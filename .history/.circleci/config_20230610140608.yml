# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  ruby: circleci/ruby@2.0.0
  node: circleci/node@5.0.3
  browser-tools: circleci/browser-tools@1.4.0
  sonarcloud: sonarsource/sonarcloud@1.1.1
  codecov: codecov/codecov@3.2.4

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  security:
    resource_class: large
    docker:
      - image: cimg/ruby:3.2.0-node
    executor: ruby/default
    steps:
      - checkout
      - ruby/install-deps
      - run:
          command: 'bundle exec brakeman -q -o tmp/brakeman.html'
          name: 'Analyse code for security vulnerabilities'
      - store_artifacts:
          path: tmp/brakeman.html
      - run:
          command: 'bundle exec bundle audit check --update'
          name: 'Analyse Ruby gems for security vulnerabilities'
  linting:
    resource_class: large
    docker:
      - image: cimg/ruby:3.2.0-node
    executor: ruby/default
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          with-cache: true
          pkg-manager: yarn
      - ruby/rubocop-check:
          format: progress
          parallel: true
          label: Inspecting with Rubocop
      - run:
          command: 'bin/erb_lint'
          name: 'Lint ERB'
  test:
    resource_class: large
    docker:
      - image: cimg/ruby:3.2.0-browsers

      - image: cimg/postgres:14.5
        environment:
          POSTGRES_USER: postgres

      - image: cimg/go:1.17
      - image: cimg/redis:6.2.6

    environment:
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      RAILS_ENV: test
      CI: 'true'
      DATABASE_URL: postgres://postgres:@localhost:5432/adventure_money_test
      REDIS_URL: redis://localhost:6379
    parallelism: 2
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          with-cache: true
          pkg-manager: yarn
      - run:
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
          name: Wait for Postgres
      - run:
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
          name: Wait for Redis
      - run:
          command: bundle exec rails db:create --trace
          name: Database creation
      - run:
          command: bundle exec rails db:schema:load --trace
          name: Database setup
      - run:
          command: bundle exec rails assets:precompile
          name: Precompile assets
      - run:
          command: |
            TEST_FILES="$(circleci tests split test_main.txt --split-by=timings)"
            bundle exec rails test $TEST_FILES
          name: Run tests
      - codecov/upload

  coverage:
    resource_class: large
    docker:
      - image: cimg/ruby:3.2.0-browsers

      - image: cimg/postgres:14.5
        environment:
          POSTGRES_USER: postgres

    environment:
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      RAILS_ENV: test
      CI: 'true'
      DATABASE_URL: postgres://postgres:@localhost:5432/adventure_money_test
    steps:
      - checkout
      - attach_workspace:
          at: .
      - ruby/install-deps
      - run:
          name: Merge and check coverage
          command: |
            bundle exec rake coverage:report
      - codecov/upload
      - sonarcloud/scan
      - store_artifacts:
          path: coverage_results
      - store_artifacts:
          path: coverage

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  verify: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - security
      - linting
      - test:
          requires:
            - linting
      - coverage:
          context: SonarCloud
          requires:
            - test
